FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Atos SLA Manager Core

The SLA Manager core provides mechanisms to support service level agreements
management in individual and federated environments, based on
[WS-Agreement specification](http://ogf.org/documents/GFD.192.pdf). 

The platform only pupports one-shot negotiation at the moment. The capabilities 
provided currently by the Atos SLA Manager core module are:

+ A language and a protocol to define and advertise the capabilities of service providers in SLA Template forms.
+ Creation agreements based on the templates.
+ Monitoring agreement compliance at runtime. An agreement between a service consumer and a service provider specifies one or more Service Level Objectives (SLOs). These are the expressions of the requirements of the service consumer and of the assurances by the service provider about the quality of services. An agreement lifecycle includes the creation, monitoring and termination of the agreement.

The WS-Agreement specification describes an XML schema for specifying service level 
agreements (both applicable to SLA Templates, Agreement Offers and Agreements). SLA 
Templates, Agreement Offers and Agreements are defined and described using the 
[WS-Agreement schema](http://schemas.ggf.org/graap/2007/03/ws-agreement).

# REST API

The REST interface to the sla-core system has the following conventions:

* Every entity is created with a POST to the collection url. The body request contains the serialized entity in the 
  format specified in the content-type header. The location header of the response refers to the url of the new 
  allocated resource. The return code is a 201 on success. Templates and agreements have special considerations 
  (see the corresponding section). 
* A query for an individual item is a GET to the url of the resource (collection url + external id). The format of the 
  response is specified in the http header with the accept parameter. The return code is 200. As expected, a not found
  resource returns a 404.
* Any other query is usually a GET to the collection's url, using the GET parameters as the query parameters. The 
  result is a list of entities that match the parameters, despite the actual number of entities. The return code is 
  200, even if the list is empty.
* Any unexpected error processing the request returns a 5xx.
* An entity (or list) is serialized in the response body by default with the format specified in the Content-type 
  header (if specified). The request may have an Accept header, that will be used if the resource allows more than one 
  Content-type.
* Updating an entity involves a PUT request, with the corresponding resource serialized in the body in the format 
  specified in the content-type header. The return code is 200.
* If a query has begin and/or end parameters, the following search is done: `begin <= entity date < end`

# Atos SLA Manager Core API Root [/]

This does not return any resource.

## Povider Collection [/providers]

### List All Providers [GET]

This operations allows to get all the registered providers in the SLA Manager Core.

+ Request (application/xml)

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <collection href="/providers">
                <items offset="0" total="1">
                    <provider>
                        <uuid>fc923960-03fe-41eb-8a21-a56709f9370f</uuid>
                        <name>Trento</name>
                    </provider>
                </items>
            </collection>

+ Request (application/json)

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/json)

    + Body

            [
                {
                    "uuid":"fc923960-03fe-41eb-8a21-a56709f9370f",
                    "name":"provider-prueba"
                }
            ]

### Create a New Provider [POST]

Allows to create a new provider. It takes a XML body containing
the name of the provider.

+ Request (application/xml)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <provider>
                <name>Trento</name>
            </provider>

+ Response 201 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <message code="201" message="The provider has been stored successfully in the SLA Repository Database. It has location http://localhost:8080/sla-service/providers/Trento"/>
            <provider>
                <uuid>Trento</uuid>
                <name>Trento</name>
            </provider>

## Provider [/providers/{provider_id}]

### Get provider info [GET]

+ Parameters

    + provider_id (uuid) - Id of the provider

+ Request (application/xml)

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <provider>
                <uuid>fc923960-03fe-41eb-8a21-a56709f9370f</uuid>
                <name>provider-prueba</name>
            </provider>

+ Request (application/json)

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/json)

    + Body

            {
                "uuid":"fc923960-03fe-41eb-8a21-a56709f9370f",
                "name":"provider-prueba"
            }

+ Response 404

        Returned when the object is not in the database.